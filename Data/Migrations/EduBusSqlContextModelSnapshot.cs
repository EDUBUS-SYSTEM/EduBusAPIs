// <auto-generated />
using System;
using Data.Contexts.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(EduBusSqlContext))]
    partial class EduBusSqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.DriverLeaveConflict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("AffectedStudents")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LeaveRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReplacementReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ReplacementScore")
                        .HasColumnType("float");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SuggestedDriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SuggestedVehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TripEndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TripStartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex("LeaveRequestId");

                    b.HasIndex("SuggestedDriverId");

                    b.HasIndex("SuggestedVehicleId");

                    b.ToTable("DriverLeaveConflicts");
                });

            modelBuilder.Entity("Data.Models.DriverLeaveRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("ApprovalNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApprovedByAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoReplacementEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LeaveType")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SuggestedReplacementDriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SuggestedReplacementVehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SuggestionGeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByAdminId");

                    b.HasIndex("DriverId");

                    b.HasIndex("SuggestedReplacementDriverId");

                    b.HasIndex("SuggestedReplacementVehicleId");

                    b.ToTable("DriverLeaveRequests");
                });

            modelBuilder.Entity("Data.Models.DriverLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("date");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("HashedLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("LicenseImageFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DriverId")
                        .IsUnique();

                    b.HasIndex(new[] { "DriverId" }, "IX_DriverLicenses_DriverId")
                        .HasDatabaseName("IX_DriverLicenses_DriverId1");

                    b.HasIndex(new[] { "HashedLicenseNumber" }, "UQ_DriverLicenses_HashedLicenseNumber")
                        .IsUnique();

                    b.ToTable("DriverLicenses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440004"),
                            CreatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            DateOfIssue = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            HashedLicenseNumber = new byte[] { 36, 50, 97, 36, 49, 49, 36, 80, 81, 118, 51, 99, 49, 121, 113, 66, 87, 86, 72, 120, 107, 100, 48, 76, 72, 65, 107, 67, 79, 89, 122, 54, 84, 116, 120, 77, 81, 74, 113, 104, 78, 56, 47, 76, 101, 119, 100, 66, 80, 106, 52, 74, 47, 72, 83, 46, 105, 75, 56, 79 },
                            IsDeleted = false,
                            IssuedBy = "Cục Đăng kiểm Việt Nam",
                            UpdatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Data.Models.DriverVehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("ApprovalNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApprovedByAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignedByAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignmentReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTimeUtc")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrimaryDriver")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTimeUtc")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByAdminId");

                    b.HasIndex("AssignedByAdminId");

                    b.HasIndex(new[] { "DriverId" }, "IX_DriverVehicles_DriverId");

                    b.HasIndex(new[] { "VehicleId" }, "IX_DriverVehicles_VehicleId");

                    b.HasIndex(new[] { "VehicleId" }, "UQ_DriverVehicles_PrimaryPerVehicle")
                        .IsUnique()
                        .HasFilter("([IsPrimaryDriver]=(1) AND [EndTimeUtc] IS NULL)");

                    b.ToTable("DriverVehicles");
                });

            modelBuilder.Entity("Data.Models.DriverWorkingHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverWorkingHours");
                });

            modelBuilder.Entity("Data.Models.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_Grades_Name")
                        .IsUnique();

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Data.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<byte[]>("HashedUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)")
                        .HasColumnName("HashedURL");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StudentId" }, "IX_Images_StudentId");

                    b.HasIndex(new[] { "HashedUrl" }, "UQ_Images_HashedURL")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Data.Models.PaymentEventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("AtUtc")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TransactionId" }, "IX_PaymentEventLogs_TransactionId");

                    b.ToTable("PaymentEventLogs");
                });

            modelBuilder.Entity("Data.Models.PickupPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Point>("Geog")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Description" }, "IX_PickupPoints_Description");

                    b.ToTable("PickupPoints");
                });

            modelBuilder.Entity("Data.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime?>("ActivatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<Guid?>("CurrentPickupPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("DeactivationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ParentEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PickupPointAssignedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CurrentPickupPointId" }, "IX_Students_CurrentPickupPointId");

                    b.HasIndex(new[] { "ParentEmail" }, "IX_Students_ParentEmail");

                    b.HasIndex(new[] { "ParentId" }, "IX_Students_ParentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440010"),
                            CreatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "Nguyen",
                            IsDeleted = false,
                            LastName = "Van An",
                            ParentEmail = "parent@edubus.com",
                            ParentId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            Status = 2,
                            UpdatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440011"),
                            CreatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "Tran",
                            IsDeleted = false,
                            LastName = "Thi Binh",
                            ParentEmail = "parent@edubus.com",
                            ParentId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            Status = 2,
                            UpdatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440012"),
                            CreatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "Le",
                            IsDeleted = false,
                            LastName = "Van Cuong",
                            ParentEmail = "parent@edubus.com",
                            ParentId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            Status = 2,
                            UpdatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Data.Models.StudentGradeEnrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTimeUtc")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("StartTimeUtc")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GradeId" }, "IX_SGE_GradeId");

                    b.HasIndex(new[] { "StudentId" }, "IX_SGE_StudentId");

                    b.HasIndex(new[] { "StudentId", "GradeId", "StartTimeUtc" }, "UQ_SGE_Student_Grade_Start")
                        .IsUnique();

                    b.ToTable("StudentGradeEnrollments");
                });

            modelBuilder.Entity("Data.Models.StudentPickupPointHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("AssignedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("ChangeReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("PickupPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AssignedAt" }, "IX_StudentPickupPointHistory_AssignedAt");

                    b.HasIndex(new[] { "PickupPointId" }, "IX_StudentPickupPointHistory_PickupPointId");

                    b.HasIndex(new[] { "StudentId" }, "IX_StudentPickupPointHistory_StudentId");

                    b.ToTable("StudentPickupPointHistory");
                });

            modelBuilder.Entity("Data.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19, 0)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("PaidAtUtc")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PickupPointRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Provider")
                        .HasColumnType("int");

                    b.Property<string>("ProviderTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QrCodeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QrContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("QrExpiredAtUtc")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentId", "CreatedAt" }, "IX_Transactions_ParentId_CreatedAt");

                    b.HasIndex(new[] { "TransactionCode" }, "UQ_Transactions_TransactionCode")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Data.Models.TransportFeeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ParentEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SemesterCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SemesterEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SemesterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SemesterStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(19, 0)");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UnitPriceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPriceVndPerKm")
                        .HasColumnType("decimal(19, 0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UnitPriceId");

                    b.HasIndex(new[] { "StudentId", "Status" }, "IX_TransportFeeItems_Student_Status");

                    b.HasIndex(new[] { "TransactionId" }, "IX_TransportFeeItems_TransactionId");

                    b.ToTable("TransportFeeItems");
                });

            modelBuilder.Entity("Data.Models.UnitPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("ByAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ByAdminName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("PricePerKm")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ByAdminId" }, "IX_UnitPrices_ByAdminId");

                    b.HasIndex(new[] { "EffectiveFrom" }, "IX_UnitPrices_EffectiveFrom");

                    b.ToTable("UnitPrices");
                });

            modelBuilder.Entity("Data.Models.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LockReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LockedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid?>("UserPhotoFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PhoneNumber" }, "IX_UserAccounts_PhoneNumber")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ_UserAccounts_Email")
                        .IsUnique();

                    b.ToTable("UserAccounts", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Data.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<byte[]>("HashedLicensePlate")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AdminId" }, "IX_Vehicles_AdminId");

                    b.HasIndex(new[] { "HashedLicensePlate" }, "UQ_Vehicles_HashedLicensePlate")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Data.Models.Admin", b =>
                {
                    b.HasBaseType("Data.Models.UserAccount");

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            Address = "123 Lê Duẩn, Quận Hải Châu, Đà Nẵng, Vietnam",
                            CreatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@edubus.com",
                            FirstName = "Nguyen",
                            Gender = 1,
                            HashedPassword = new byte[] { 36, 50, 97, 36, 49, 48, 36, 57, 50, 73, 88, 85, 78, 112, 107, 106, 79, 48, 114, 79, 81, 53, 98, 121, 77, 105, 46, 89, 101, 52, 111, 75, 111, 69, 97, 51, 82, 111, 57, 108, 108, 67, 47, 46, 111, 103, 47, 97, 116, 50, 46, 117, 104, 101, 87, 71, 47, 105, 103, 105 },
                            IsDeleted = false,
                            LastName = "Van Admin",
                            PhoneNumber = "0901234567",
                            UpdatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Data.Models.Driver", b =>
                {
                    b.HasBaseType("Data.Models.UserAccount");

                    b.Property<Guid?>("HealthCertificateFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusNote")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Drivers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            Address = "456 Trần Phú, Quận Hải Châu, Đà Nẵng, Vietnam",
                            CreatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1985, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "driver@edubus.com",
                            FirstName = "Tran",
                            Gender = 1,
                            HashedPassword = new byte[] { 36, 50, 97, 36, 49, 48, 36, 57, 50, 73, 88, 85, 78, 112, 107, 106, 79, 48, 114, 79, 81, 53, 98, 121, 77, 105, 46, 89, 101, 52, 111, 75, 111, 69, 97, 51, 82, 111, 57, 108, 108, 67, 47, 46, 111, 103, 47, 97, 116, 50, 46, 117, 104, 101, 87, 71, 47, 105, 103, 105 },
                            IsDeleted = false,
                            LastName = "Van Driver",
                            PhoneNumber = "0901234568",
                            UpdatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Data.Models.Parent", b =>
                {
                    b.HasBaseType("Data.Models.UserAccount");

                    b.ToTable("Parents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            Address = "123 Nguyen Van Linh, District 7, Ho Chi Minh City",
                            CreatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1984, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "parent@edubus.com",
                            FirstName = "Le",
                            Gender = 2,
                            HashedPassword = new byte[] { 36, 50, 97, 36, 49, 48, 36, 57, 50, 73, 88, 85, 78, 112, 107, 106, 79, 48, 114, 79, 81, 53, 98, 121, 77, 105, 46, 89, 101, 52, 111, 75, 111, 69, 97, 51, 82, 111, 57, 108, 108, 67, 47, 46, 111, 103, 47, 97, 116, 50, 46, 117, 104, 101, 87, 71, 47, 105, 103, 105 },
                            IsDeleted = false,
                            LastName = "Thi Parent",
                            PhoneNumber = "0901234569",
                            UpdatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Data.Models.DriverLeaveConflict", b =>
                {
                    b.HasOne("Data.Models.DriverLeaveRequest", "LeaveRequest")
                        .WithMany("Conflicts")
                        .HasForeignKey("LeaveRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Driver", "SuggestedDriver")
                        .WithMany()
                        .HasForeignKey("SuggestedDriverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.Vehicle", "SuggestedVehicle")
                        .WithMany()
                        .HasForeignKey("SuggestedVehicleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LeaveRequest");

                    b.Navigation("SuggestedDriver");

                    b.Navigation("SuggestedVehicle");
                });

            modelBuilder.Entity("Data.Models.DriverLeaveRequest", b =>
                {
                    b.HasOne("Data.Models.Admin", "ApprovedByAdmin")
                        .WithMany("ApprovedLeaveRequests")
                        .HasForeignKey("ApprovedByAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.Driver", "Driver")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.Driver", "SuggestedReplacementDriver")
                        .WithMany()
                        .HasForeignKey("SuggestedReplacementDriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.Models.Vehicle", "SuggestedReplacementVehicle")
                        .WithMany()
                        .HasForeignKey("SuggestedReplacementVehicleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedByAdmin");

                    b.Navigation("Driver");

                    b.Navigation("SuggestedReplacementDriver");

                    b.Navigation("SuggestedReplacementVehicle");
                });

            modelBuilder.Entity("Data.Models.DriverLicense", b =>
                {
                    b.HasOne("Data.Models.Driver", "Driver")
                        .WithOne("DriverLicense")
                        .HasForeignKey("Data.Models.DriverLicense", "DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Data.Models.DriverVehicle", b =>
                {
                    b.HasOne("Data.Models.Admin", "ApprovedByAdmin")
                        .WithMany("ApprovedDriverVehicles")
                        .HasForeignKey("ApprovedByAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.Admin", "AssignedByAdmin")
                        .WithMany("AssignedDriverVehicles")
                        .HasForeignKey("AssignedByAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.Driver", "Driver")
                        .WithMany("DriverVehicles")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.Vehicle", "Vehicle")
                        .WithMany("DriverVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByAdmin");

                    b.Navigation("AssignedByAdmin");

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Data.Models.DriverWorkingHours", b =>
                {
                    b.HasOne("Data.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Data.Models.Image", b =>
                {
                    b.HasOne("Data.Models.Student", "Student")
                        .WithMany("Images")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Data.Models.RefreshToken", b =>
                {
                    b.HasOne("Data.Models.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.Student", b =>
                {
                    b.HasOne("Data.Models.PickupPoint", "CurrentPickupPoint")
                        .WithMany("Students")
                        .HasForeignKey("CurrentPickupPointId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentPickupPoint");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.Models.StudentGradeEnrollment", b =>
                {
                    b.HasOne("Data.Models.Grade", "Grade")
                        .WithMany("StudentGradeEnrollments")
                        .HasForeignKey("GradeId")
                        .IsRequired();

                    b.HasOne("Data.Models.Student", "Student")
                        .WithMany("StudentGradeEnrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Data.Models.StudentPickupPointHistory", b =>
                {
                    b.HasOne("Data.Models.PickupPoint", "PickupPoint")
                        .WithMany("StudentPickupPointHistory")
                        .HasForeignKey("PickupPointId")
                        .IsRequired();

                    b.HasOne("Data.Models.Student", "Student")
                        .WithMany("PickupPointHistory")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PickupPoint");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Data.Models.Transaction", b =>
                {
                    b.HasOne("Data.Models.Parent", "Parent")
                        .WithMany("Transactions")
                        .HasForeignKey("ParentId")
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.Models.TransportFeeItem", b =>
                {
                    b.HasOne("Data.Models.Student", "Student")
                        .WithMany("TransportFeeItems")
                        .HasForeignKey("StudentId")
                        .IsRequired();

                    b.HasOne("Data.Models.Transaction", "Transaction")
                        .WithMany("TransportFeeItems")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.UnitPrice", "UnitPrice")
                        .WithMany("TransportFeeItems")
                        .HasForeignKey("UnitPriceId");

                    b.Navigation("Student");

                    b.Navigation("Transaction");

                    b.Navigation("UnitPrice");
                });

            modelBuilder.Entity("Data.Models.UnitPrice", b =>
                {
                    b.HasOne("Data.Models.Admin", "ByAdmin")
                        .WithMany("UnitPrices")
                        .HasForeignKey("ByAdminId")
                        .IsRequired();

                    b.Navigation("ByAdmin");
                });

            modelBuilder.Entity("Data.Models.Vehicle", b =>
                {
                    b.HasOne("Data.Models.Admin", "Admin")
                        .WithMany("Vehicles")
                        .HasForeignKey("AdminId")
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Data.Models.Admin", b =>
                {
                    b.HasOne("Data.Models.UserAccount", null)
                        .WithOne()
                        .HasForeignKey("Data.Models.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Driver", b =>
                {
                    b.HasOne("Data.Models.UserAccount", null)
                        .WithOne()
                        .HasForeignKey("Data.Models.Driver", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Parent", b =>
                {
                    b.HasOne("Data.Models.UserAccount", null)
                        .WithOne()
                        .HasForeignKey("Data.Models.Parent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.DriverLeaveRequest", b =>
                {
                    b.Navigation("Conflicts");
                });

            modelBuilder.Entity("Data.Models.Grade", b =>
                {
                    b.Navigation("StudentGradeEnrollments");
                });

            modelBuilder.Entity("Data.Models.PickupPoint", b =>
                {
                    b.Navigation("StudentPickupPointHistory");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Data.Models.Student", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("PickupPointHistory");

                    b.Navigation("StudentGradeEnrollments");

                    b.Navigation("TransportFeeItems");
                });

            modelBuilder.Entity("Data.Models.Transaction", b =>
                {
                    b.Navigation("TransportFeeItems");
                });

            modelBuilder.Entity("Data.Models.UnitPrice", b =>
                {
                    b.Navigation("TransportFeeItems");
                });

            modelBuilder.Entity("Data.Models.Vehicle", b =>
                {
                    b.Navigation("DriverVehicles");
                });

            modelBuilder.Entity("Data.Models.Admin", b =>
                {
                    b.Navigation("ApprovedDriverVehicles");

                    b.Navigation("ApprovedLeaveRequests");

                    b.Navigation("AssignedDriverVehicles");

                    b.Navigation("UnitPrices");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Data.Models.Driver", b =>
                {
                    b.Navigation("DriverLicense");

                    b.Navigation("DriverVehicles");

                    b.Navigation("LeaveRequests");
                });

            modelBuilder.Entity("Data.Models.Parent", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
